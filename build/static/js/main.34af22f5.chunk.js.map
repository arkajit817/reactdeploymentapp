{"version":3,"sources":["config.js","httpService.js","App.js","serviceWorker.js","index.js"],"names":["ConfigObjects","templateUrl","serverUrl","Options","headers","TemplateUrl","ConfigObj","ServerUrl","HttpService","getTemplate","axios","get","saveData","data","post","allData","deleteData","id","delete","IDBCursor","App","props","initializaVal","setState","templateName","versionNo","urlEntry","initFunction","query1","query2","Promise","all","then","response","tempData","contents","error","console","onSelect","event","value","target","name","tempVersion","state","versions","onSave","url","version","res","this","className","onChange","disabled","map","tName","i","key","v","onClick","d","deployedAt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.34af22f5.chunk.js","sourcesContent":["const ConfigObjects = {\r\n    templateUrl: 'https://www.npoint.io/documents/8f7cf8628b367ffd50a2',\r\n    serverUrl: 'http://localhost:8000/api/deployment/'\r\n}\r\n\r\nexport default ConfigObjects;","import axios from 'axios';\r\nimport ConfigObj from './config';\r\n\r\nconst Options = {\r\n    headers: {\r\n        'Content-Type':'application/json'\r\n    }\r\n}\r\n\r\nconst TemplateUrl = ConfigObj.templateUrl;\r\nconst ServerUrl = ConfigObj.serverUrl;\r\n\r\nvar HttpService = {\r\n    getTemplate: ()=>{\r\n        return axios.get(TemplateUrl);\r\n    },\r\n    saveData: (data)=>{\r\n        return axios.post(ServerUrl+'add',data,Options);\r\n    },\r\n    allData: ()=>{\r\n        return axios.get(ServerUrl+'all',Options)\r\n    },\r\n    deleteData: (id)=>{\r\n        return axios.delete(ServerUrl+'delete/'+IDBCursor,Options);\r\n    }\r\n}\r\nexport default HttpService;","import React from 'react';\nimport './App.css';\nimport HttpService from './httpService';\n\nclass App extends React.Component{\n\n  constructor(props) {\n        super(props);\n        this.state = {\n          tempData: [],\n          tempVersion: [],\n          templateName: 'DEFAULT',\n          versionNo:'DEFAULT',\n          allData:[],\n          urlEntry: '',\n        }\n    }\ncomponentDidMount(){\n    this.initFunction();\n}\n\ninitializaVal = ()=>{\n  this.setState({\n    templateName: 'DEFAULT',\n    versionNo:'DEFAULT',\n    urlEntry:''\n  })\n}\n\ninitFunction = ()=>{\n    const query1 = HttpService.getTemplate()\n    const query2 = HttpService.allData();\n    Promise.all([query1,query2]).then(\n      (response)=>{\n        this.setState({ tempData: response[0].data.contents });\n        this.setState({allData:response[1].data});\n      },error=>{\n        console.error('Error occured');\n      }\n    )\n}\n\nonSelect = (event)=>{\n  const value = (event.target.value);\n  const name = (event.target.name);\n  switch(name){\n    case 'template':\n      this.setState(\n        { tempVersion: this.state.tempData[value].versions, \n          templateName: this.state.tempData[value].name});\n    break;\n    case 'version':\n      this.setState({versionNo:value})\n    break;\n    case 'url':\n      this.setState({urlEntry:value})\n    break;\n    default:\n    break;\n  }\n}\n\nonSave = ()=>{\n  HttpService.saveData(\n    {name:this.state.templateName,url:this.state.urlEntry,version:this.state.versionNo})\n    .then((res)=>{\n      this.initFunction();\n      this.initializaVal();\n    },(error)=>{})\n}\n\nrender() {\n  return (\n    <div className=\"App container\">\n      <div className=\"row form-group\">\n          <div className=\"col-md-4 col-sm-4\">\n            <div className=\"input-group mb-6\">\n              <div className=\"input-group-prepend\">\n                <label className=\"input-group-text\">Template</label>\n              </div>\n              <select name=\"template\" value={this.state.templateName} className=\"custom-select\" onChange={this.onSelect}>\n                <option value=\"DEFAULT\" disabled>Pick one</option>\n                 {this.state.tempData.map((tName, i)=>{\n                   return <option key={i} value={i}>{tName.name}</option>\n                 })}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"col-md-3 col-sm-3\">\n            <div className=\"input-group mb-6\">\n              <div className=\"input-group-prepend\">\n                <label className=\"input-group-text\">Version</label>\n              </div>\n              <select name=\"version\" value={this.state.versionNo} className=\"custom-select\" onChange={this.onSelect}>\n                <option value=\"DEFAULT\" disabled>Pick one</option>\n                {this.state.tempVersion.map((v,i)=>{\n                  return <option key={i} value={v}>{v}</option>\n                })} \n              </select>\n            </div>\n          </div>\n\n          <div className=\"col-md-4 col-sm-4\">\n            <div className=\"input-group mb-6\">\n              <div className=\"input-group-prepend\">\n                <label className=\"input-group-text\">URL</label>\n              </div>\n              <input className=\"form-control\" value={this.state.urlEntry} name=\"url\" onChange={this.onSelect}/>\n            </div>\n          </div>\n\n          <div className=\"\">\n            <button className=\"btn btn-primary\" onClick={this.onSave}>Save</button>\n          </div>\n      </div>\n      <div className=\"table-responsive\">\n      <table className=\"table table-bordered\">\n        <thead>\n                <tr>\n                  <th>Serial no</th>\n                  <th>Name</th>\n                  <th>Version</th>\n                  <th>URL</th>\n                  <th>Deploy Date</th>\n                </tr>\n        </thead>\n        <tbody>\n                {this.state.allData.map((d,i)=>{\n                  return <tr key={i}>\n                    <th>{i+1}</th>\n                    <th>{d.name}</th>\n                    <th>{d.version}</th>\n                    <th>{d.url}</th>\n                    <th>{d.deployedAt}</th>\n                  </tr>\n                })}\n        </tbody>\n      </table>\n      </div>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}